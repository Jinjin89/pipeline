configfile: "config.yaml"
#############################################
# Functions
# 1) Using pandas to read samples metadata
#############################################

import pandas as pd
import os

class pe_sample:
    def __init__(self,input_sample_meta_file,sample_column = "sample",lane = 'lane',R1_column = "R1",R2_column = "R2",output_dir = "results"):        # the input params
        self.sample_meta_file = input_sample_meta_file
        self.sample_column = sample_column
        self.lane = lane
        self.R1_column = R1_column
        self.R2_column = R2_column
        # the output params
        self.output_dir = output_dir
        print("="*50)
        if not os.path.isdir(self.output_dir):
            print("output direcory not found, create it!")
            print(self.output_dir)
            os.mkdir(self.output_dir)
        else:
            print("output direcory found, skip!")

    def read_sample_file(self):
        if self.sample_meta_file.endswith("csv"):
            self.samples_df = pd.read_csv(self.sample_meta_file)
        elif self.sample_meta_file.endswith("txt") or self.sample_meta_file.endswith("tsv"):
            self.samples_df = pd.read_table(self.sample_meta_file,sep = "\t")
        else:
            print("please supply sample metadata with csv/txt/tsv format!")
            exit("###############################\nThere is something wrong, you know, I only accept the files with csv/txt/tsv extension!\n###############################")

        # 1) get all the samples
        self.all_samples = self.samples_df[self.sample_column].unique().tolist()
        # 4) get all the unique lan id
        self.samples_df[self.lane] = self.samples_df.groupby(self.sample_column).cumcount() + 1

    # CRX107889_S0_L001_R2_001.fastq.gz
    def R1_rename(self):
        samples_now = self.samples_df[self.sample_column]
        lane_now = self.samples_df[self.lane]
        res = []
        for s,l in zip(samples_now,lane_now):
            l_tmp = "L001"
            l = str(l)
            l_l = -len(l)
            l = str(l_tmp[:l_l]) + l
            new_file_name = '_'.join([str(s),"S0",str(l),"R1_001.fastq.gz"])
            new_file_name = path_generator([self.output_dir,"step01_rename",new_file_name])
            res.append(new_file_name)
        return res

    def R2_rename(self):
        samples_now = self.samples_df[self.sample_column]
        lane_now = self.samples_df[self.lane]
        res = []
        for s,l in zip(samples_now,lane_now):
            l_tmp = "L001"
            l = str(l)
            l_l = -len(l)
            l = str(l_tmp[:l_l]) + l
            new_file_name = '_'.join([str(s),"S0",str(l),"R2_001.fastq.gz"])
            new_file_name = path_generator([self.output_dir,"step01_rename",new_file_name])
            res.append(new_file_name)
        return res
    
    def runlink(self):
        r1_files = self.samples_df[self.R1_column]
        r1_new = self.samples_df["R1_rename"]
        r2_files = self.samples_df[self.R2_column]
        r2_new = self.samples_df["R2_rename"]
        # get output link directory
        new_dir = path_generator([self.output_dir,"step01_rename"])
        if not os.path.isdir(new_dir):
            print('output dire not found, build it!')
            os.mkdir(new_dir)
        for source,target in zip(r1_files,r1_new): 
            if not os.path.islink(str(target)):
                print(target)
                try:
                    print("create link")
                    os.symlink(source,target)
                except OSError as e:
                    print(f"Error creating symbolic link: {e}")

        for source,target in zip(r2_files,r2_new): 
            if not os.path.islink(str(target)):
                print(target)
                print(os.path.islink(str(target)))
                try:
                    print("create link")
                    os.symlink(source,target)
                except OSError as e:
                    print(f"Error creating symbolic link: {e}")

    def get_meta(self):
        print("="*50)
        self.samples_df["R1_rename"] = self.R1_rename()
        self.samples_df["R2_rename"] = self.R2_rename()
        print("meta data shape:(should have same rows with input_file)")


    def getSample(self,wildcards):
        df = self.samples_df[self.samples_df[self.sample_column ]== wildcards.sample]
        R1 = df["R1_rename"].tolist()
        R2 = df["R2_rename"].tolist()
        return R1 + R2


def path_generator(input_list):
    return "/".join(input_list)


#############################################
# load configs
#############################################

samples_info = pe_sample(config["input_file"],output_dir = config["output_directory"])

# 1) get samples
samples_info.read_sample_file()
samples_info.get_meta()

# 2) generate the link files, skip if exsits
samples_info.runlink()

# create dir
samples = samples_info.all_samples
# print(samples_info.samples_df)
print("="*50)
print("How many samples input?")
print(len(samples))
print(samples)
print("============>end of data preparations<============")
print("="*50)

#############################################
# Rules
#############################################

rule all:
    input: 
        expand(path_generator([config["output_directory"],"step02_outs",'{sample}','outs','filtered_feature_bc_matrix','matrix.mtx.gz']),sample = samples)

rule cellranger:
    input:
        samples_info.getSample
    output:
        barcode = path_generator([config["output_directory"],"step02_outs",'{sample}','outs','filtered_feature_bc_matrix','barcodes.tsv.gz']),
        features = path_generator([config["output_directory"],"step02_outs",'{sample}','outs','filtered_feature_bc_matrix','features.tsv.gz']),
        matrix = path_generator([config["output_directory"],"step02_outs",'{sample}','outs','filtered_feature_bc_matrix','matrix.mtx.gz'])

    params:
        fqs = path_generator([config["output_directory"],"step01_rename"]),
        sample = '{sample}',
        cellranger = config['cellranger'],
        ref = config['ref'],
        memory = config['memory'],
        results_dir =  path_generator([config["output_directory"]]),
        tmp_dir =  path_generator([config["output_directory"],'step02_outs','{sample}']),
        output_dir = path_generator([config["output_directory"],'step02_outs','{sample}']),
        log_dir = path_generator([config["output_directory"],".log"]),
        log_name = path_generator([config["output_directory"],".log",'{sample}_step02.log'])

    threads: config['threads']
    shell: 
        '''
        [[ ! -d {params.results_dir} ]] && mkdir -p {params.results_dir};
        [[ ! -d {params.log_dir} ]] && mkdir -p {params.log_dir};
        [[ -d {params.tmp_dir} ]] && rm -r {params.tmp_dir};
        [[ ! -d {params.tmp_dir} ]] && mkdir -p {params.tmp_dir};

        cd {params.log_dir};

        {params.cellranger} count --id={params.sample} \
                        --transcriptome={params.ref} \
                        --fastqs={params.fqs} \
                        --sample={params.sample} \
                        --localcores={threads} \
                        --output-dir={params.output_dir}\
                        --localmem={params.memory} > {params.log_name};
        wait;

        '''
